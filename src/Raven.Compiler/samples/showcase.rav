namespace Samples

import System.*
import System.Console.*
import System.Collections.Generic.*
import System.Linq.*

alias SB = System.Text.StringBuilder
alias Stage = "Backlog" | "InProgress" | "Review" | "Done"
alias Priority = "Low" | "Medium" | "High"
alias WorkItem = (id: int, title: string, priority: Priority, stage: Stage)
alias Command = (id: int, signal: string | null)
alias Marker = (marker: string, reminder: string)

func Promote(item: WorkItem, signal: string | null) -> WorkItem {
    let nextStage =
        (item.stage, signal) match {
            ("Backlog", "start") => "InProgress"
            ("InProgress", "review") => "Review"
            ("Review", "approve") => "Done"
            (stage, "reset") when stage != "Done" => "Backlog"
            (_, null) => item.stage
            _ => item.stage
        }

    (id: item.id, title: item.title, priority: item.priority, stage: nextStage)
}

func DescribeStage(stage: Stage) -> string {
    stage match {
        "Backlog" => "📝 ready to explore"
        "InProgress" => "⚙️ being shaped"
        "Review" => "👀 ready for feedback"
        "Done" => "🎉 shipped"
    }
}

func DescribePriority(priority: Priority) -> Marker {
    priority match {
        "High" => (marker: "🔥", reminder: "Focus today")
        "Medium" => (marker: "✨", reminder: "Keep momentum")
        "Low" => (marker: "🌱", reminder: "Nurture when possible")
    }
}

func BuildLine(stageDescription: string, item: WorkItem, markers: Marker) -> string {
    "${markers.marker} #${item.id} ${item.title} — ${stageDescription} (${markers.reminder})"
}

func Summarize(board: IEnumerable<WorkItem>) -> string {
    let builder = SB()

    builder.AppendLine("Sprint summary @ ${System.DateTime.UtcNow.ToString(\"u\")}")
    builder.AppendLine("--------------------------------")

    for each item in board {
        let markers = DescribePriority(item.priority)
        let line =
            item.stage
                |> DescribeStage
                |> BuildLine(item, markers)

        builder.AppendLine(line)
    }

    builder.ToString().TrimEnd()
}

func Apply(board: IEnumerable<WorkItem>, command: Command) -> IEnumerable<WorkItem> {
    board.Select(item => {
        if item.id == command.id {
            Promote(item, command.signal)
        } else {
            item
        }
    })
}

let board = List<WorkItem>()
board.Add((id: 1, title: "Sketch the Raven sample", priority: "High", stage: "Backlog"))
board.Add((id: 2, title: "Polish diagnostics", priority: "Medium", stage: "InProgress"))
board.Add((id: 3, title: "Write language tour", priority: "Low", stage: "Review"))

let script = List<Command>()
script.Add((id: 1, signal: "start"))
script.Add((id: 1, signal: "review"))
script.Add((id: 1, signal: "approve"))
script.Add((id: 2, signal: "reset"))
script.Add((id: 3, signal: null))

var flow: IEnumerable<WorkItem> = board.AsEnumerable()

for each command in script {
    flow = Apply(flow, command)
}

let report = Summarize(flow)

WriteLine(report)
