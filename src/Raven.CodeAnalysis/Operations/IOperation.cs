using System.Collections.Immutable;

using Raven.CodeAnalysis.Symbols;
using Raven.CodeAnalysis.Syntax;

namespace Raven.CodeAnalysis.Operations;

/// <summary>
/// Represents a semantic operation produced by the Raven compiler.
/// </summary>
public interface IOperation
{
    /// <summary>
    /// Gets the semantic model this operation belongs to.
    /// </summary>
    SemanticModel SemanticModel { get; }

    /// <summary>
    /// Gets the kind of this operation.
    /// </summary>
    OperationKind Kind { get; }

    /// <summary>
    /// Gets the syntax node that produced the operation.
    /// </summary>
    SyntaxNode Syntax { get; }

    /// <summary>
    /// Gets the type of the value produced by the operation, if any.
    /// </summary>
    ITypeSymbol? Type { get; }

    /// <summary>
    /// Gets a value indicating whether the operation was implicitly generated by the compiler.
    /// </summary>
    bool IsImplicit { get; }

    /// <summary>
    /// Gets the parent operation in the tree, or <c>null</c> if this is the root.
    /// </summary>
    IOperation? Parent { get; }

    /// <summary>
    /// Gets the child operations contained within this operation.
    /// </summary>
    ImmutableArray<IOperation> Children { get; }

    /// <summary>
    /// Accepts the specified visitor.
    /// </summary>
    void Accept(OperationVisitor visitor);

    /// <summary>
    /// Accepts the specified visitor and returns a value.
    /// </summary>
    TResult Accept<TResult>(OperationVisitor<TResult> visitor);
}
