// <auto-generated />
// This file was generated by tools/DiagnosticsGenerator.

namespace Raven.CodeAnalysis;

internal static partial class CompilerDiagnostics
{
    private static DiagnosticDescriptor[]? _allDescriptors;
    private static DiagnosticDescriptor? _cannotApplyIndexingWithToAnExpressionOfType;
    private static DiagnosticDescriptor? _operatorCannotBeAppliedToOperandOfType;
    private static DiagnosticDescriptor? _operatorCannotBeAppliedToOperandsOfTypes;
    private static DiagnosticDescriptor? _thisValueIsNotMutable;
    private static DiagnosticDescriptor? _invalidInvocation;
    private static DiagnosticDescriptor? _theNameDoesNotExistInTheCurrentContext;
    private static DiagnosticDescriptor? _typeAlreadyDefinesMember;
    private static DiagnosticDescriptor? _functionAlreadyDefined;
    private static DiagnosticDescriptor? _memberDoesNotContainDefinition;
    private static DiagnosticDescriptor? _variableUsedLikeAType;
    private static DiagnosticDescriptor? _callIsAmbiguous;
    private static DiagnosticDescriptor? _leftOfAssignmentMustBeAVariablePropertyOrIndexer;
    private static DiagnosticDescriptor? _methodNameExpected;
    private static DiagnosticDescriptor? _useOfUnassignedVariable;
    private static DiagnosticDescriptor? _localVariableMustBeInitialized;
    private static DiagnosticDescriptor? _variableAlreadyDefined;
    private static DiagnosticDescriptor? _variableShadowsOuterScope;
    private static DiagnosticDescriptor? _readOnlyFieldCannotBeAssignedTo;
    private static DiagnosticDescriptor? _propertyOrIndexerCannotBeAssignedIsReadOnly;
    private static DiagnosticDescriptor? _typeOrNamespaceNameDoesNotExistInTheNamespace;
    private static DiagnosticDescriptor? _typeExpectedWithoutWildcard;
    private static DiagnosticDescriptor? _unassignedOutParameter;
    private static DiagnosticDescriptor? _typeRequiresTypeArguments;
    private static DiagnosticDescriptor? _cannotInheritFromSealedType;
    private static DiagnosticDescriptor? _overrideMemberNotFound;
    private static DiagnosticDescriptor? _virtualMemberInSealedType;
    private static DiagnosticDescriptor? _sealedMemberMustOverride;
    private static DiagnosticDescriptor? _cannotOverrideSealedMember;
    private static DiagnosticDescriptor? _staticMemberCannotBeVirtualOrOverride;
    private static DiagnosticDescriptor? _constructorInitializerNotAllowedOnStaticConstructor;
    private static DiagnosticDescriptor? _explicitInterfaceSpecifierMustBeInterface;
    private static DiagnosticDescriptor? _containingTypeDoesNotImplementInterface;
    private static DiagnosticDescriptor? _explicitInterfaceMemberNotFound;
    private static DiagnosticDescriptor? _nullableTypeInUnion;
    private static DiagnosticDescriptor? _typeNameDoesNotExistInType;
    private static DiagnosticDescriptor? _symbolIsInaccessible;
    private static DiagnosticDescriptor? _cannotAssignVoidToAnImplicitlyTypedVariable;
    private static DiagnosticDescriptor? _expressionExpected;
    private static DiagnosticDescriptor? _identifierExpected;
    private static DiagnosticDescriptor? _semicolonExpected;
    private static DiagnosticDescriptor? _characterExpected;
    private static DiagnosticDescriptor? _duplicateModifier;
    private static DiagnosticDescriptor? _importDirectiveOutOfOrder;
    private static DiagnosticDescriptor? _aliasDirectiveOutOfOrder;
    private static DiagnosticDescriptor? _fieldDeclarationRequiresLetOrVar;
    private static DiagnosticDescriptor? _unrecognizedEscapeSequence;
    private static DiagnosticDescriptor? _newlineInConstant;
    private static DiagnosticDescriptor? _fileScopedCodeOutOfOrder;
    private static DiagnosticDescriptor? _fileScopedCodeRequiresConsole;
    private static DiagnosticDescriptor? _fileScopedCodeMultipleFiles;
    private static DiagnosticDescriptor? _consoleApplicationRequiresEntryPoint;
    private static DiagnosticDescriptor? _noOverloadForMethod;
    private static DiagnosticDescriptor? _cannotConvertFromTypeToType;
    private static DiagnosticDescriptor? _cannotAssignFromTypeToType;
    private static DiagnosticDescriptor? _invalidExpressionTerm;
    private static DiagnosticDescriptor? _returnStatementInExpression;
    private static DiagnosticDescriptor? _ifExpressionRequiresElse;
    private static DiagnosticDescriptor? _nonInvocableMember;
    private static DiagnosticDescriptor? _numericLiteralOutOfRange;
    private static DiagnosticDescriptor? _unterminatedCharacterLiteral;
    private static DiagnosticDescriptor? _invalidEscapeSequence;
    private static DiagnosticDescriptor? _memberAccessRequiresTargetType;
    private static DiagnosticDescriptor? _invalidAliasType;
    private static DiagnosticDescriptor? _invalidImportTarget;
    private static DiagnosticDescriptor? _spreadSourceMustBeEnumerable;
    private static DiagnosticDescriptor? _matchExpressionNotExhaustive;
    private static DiagnosticDescriptor? _matchExpressionArmUnreachable;
    private static DiagnosticDescriptor? _matchExpressionArmPatternInvalid;
    private static DiagnosticDescriptor? _lambdaParameterTypeCannotBeInferred;
    private static DiagnosticDescriptor? _methodGroupRequiresDelegateType;
    private static DiagnosticDescriptor? _methodGroupConversionIsAmbiguous;
    private static DiagnosticDescriptor? _noOverloadMatchesDelegate;

    /// <summary>
    /// RAV0021: Cannot apply indexing with [] to an expression of type '{0}'
    /// </summary>
    public static DiagnosticDescriptor CannotApplyIndexingWithToAnExpressionOfType => _cannotApplyIndexingWithToAnExpressionOfType ??= DiagnosticDescriptor.Create(
        id: "RAV0021",
        title: "Cannot apply indexing with [] to an expression of type '{0}'",
        description: "",
        helpLinkUri: "",
        messageFormat: "Cannot apply indexing with [] to an expression of type '{0}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0023: Operator '{0}' cannot be applied to operand of type '{1}'
    /// </summary>
    public static DiagnosticDescriptor OperatorCannotBeAppliedToOperandOfType => _operatorCannotBeAppliedToOperandOfType ??= DiagnosticDescriptor.Create(
        id: "RAV0023",
        title: "Operator cannot be applied to operand of specific type",
        description: "",
        helpLinkUri: "",
        messageFormat: "Operator '{0}' cannot be applied to operand of type '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0024: Operator '{0}' cannot be applied to operands of type '{1}' and '{2}'
    /// </summary>
    public static DiagnosticDescriptor OperatorCannotBeAppliedToOperandsOfTypes => _operatorCannotBeAppliedToOperandsOfTypes ??= DiagnosticDescriptor.Create(
        id: "RAV0024",
        title: "Operator cannot be applied to operanda of specific typea",
        description: "",
        helpLinkUri: "",
        messageFormat: "Operator '{0}' cannot be applied to operands of type '{1}' and '{2}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0027: This value is not mutable
    /// </summary>
    public static DiagnosticDescriptor ThisValueIsNotMutable => _thisValueIsNotMutable ??= DiagnosticDescriptor.Create(
        id: "RAV0027",
        title: "This value is not mutable",
        description: "",
        helpLinkUri: "",
        messageFormat: "This value is not mutable",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0030: Invalid invocation expression.
    /// </summary>
    public static DiagnosticDescriptor InvalidInvocation => _invalidInvocation ??= DiagnosticDescriptor.Create(
        id: "RAV0030",
        title: "Invalid invocation",
        description: "",
        helpLinkUri: "",
        messageFormat: "Invalid invocation expression.",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0103: The name '{0}' does not exist in the current context
    /// </summary>
    public static DiagnosticDescriptor TheNameDoesNotExistInTheCurrentContext => _theNameDoesNotExistInTheCurrentContext ??= DiagnosticDescriptor.Create(
        id: "RAV0103",
        title: "The name does not exist in the current context",
        description: "",
        helpLinkUri: "",
        messageFormat: "The name '{0}' does not exist in the current context",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0111: Type '{0}' already defines a member called '{1}' with the same parameter types
    /// </summary>
    public static DiagnosticDescriptor TypeAlreadyDefinesMember => _typeAlreadyDefinesMember ??= DiagnosticDescriptor.Create(
        id: "RAV0111",
        title: "Member already defined",
        description: "",
        helpLinkUri: "",
        messageFormat: "Type '{0}' already defines a member called '{1}' with the same parameter types",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0112: A function named '{0}' is already defined with the same parameter types
    /// </summary>
    public static DiagnosticDescriptor FunctionAlreadyDefined => _functionAlreadyDefined ??= DiagnosticDescriptor.Create(
        id: "RAV0112",
        title: "Function already defined",
        description: "",
        helpLinkUri: "",
        messageFormat: "A function named '{0}' is already defined with the same parameter types",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0117: '{0}' does not contain a definition for '{1}'
    /// </summary>
    public static DiagnosticDescriptor MemberDoesNotContainDefinition => _memberDoesNotContainDefinition ??= DiagnosticDescriptor.Create(
        id: "RAV0117",
        title: "Member does not contain definition",
        description: "",
        helpLinkUri: "",
        messageFormat: "'{0}' does not contain a definition for '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0118: '{0}' is a variable but is used like a type
    /// </summary>
    public static DiagnosticDescriptor VariableUsedLikeAType => _variableUsedLikeAType ??= DiagnosticDescriptor.Create(
        id: "RAV0118",
        title: "Variable used like a type",
        description: "",
        helpLinkUri: "",
        messageFormat: "'{0}' is a variable but is used like a type",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0121: The call is ambiguous between the following methods or properties: '{0}' and '{1}'
    /// </summary>
    public static DiagnosticDescriptor CallIsAmbiguous => _callIsAmbiguous ??= DiagnosticDescriptor.Create(
        id: "RAV0121",
        title: "Call is ambiguous",
        description: "",
        helpLinkUri: "",
        messageFormat: "The call is ambiguous between the following methods or properties: '{0}' and '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0131: The left-hand side of an assignment must be a variable, property or indexer
    /// </summary>
    public static DiagnosticDescriptor LeftOfAssignmentMustBeAVariablePropertyOrIndexer => _leftOfAssignmentMustBeAVariablePropertyOrIndexer ??= DiagnosticDescriptor.Create(
        id: "RAV0131",
        title: "The left-hand side of an assignment must be a variable, property or indexer",
        description: "",
        helpLinkUri: "",
        messageFormat: "The left-hand side of an assignment must be a variable, property or indexer",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0149: Method name expected
    /// </summary>
    public static DiagnosticDescriptor MethodNameExpected => _methodNameExpected ??= DiagnosticDescriptor.Create(
        id: "RAV0149",
        title: "Method name expected",
        description: "",
        helpLinkUri: "",
        messageFormat: "Method name expected",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0165: Use of unassigned local variable '{0}'
    /// </summary>
    public static DiagnosticDescriptor UseOfUnassignedVariable => _useOfUnassignedVariable ??= DiagnosticDescriptor.Create(
        id: "RAV0165",
        title: "Use of unassigned local variable",
        description: "",
        helpLinkUri: "",
        messageFormat: "Use of unassigned local variable '{0}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0166: Local variable '{0}' must be initialized
    /// </summary>
    public static DiagnosticDescriptor LocalVariableMustBeInitialized => _localVariableMustBeInitialized ??= DiagnosticDescriptor.Create(
        id: "RAV0166",
        title: "Local variable must be initialized",
        description: "",
        helpLinkUri: "",
        messageFormat: "Local variable '{0}' must be initialized",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0167: A variable named '{0}' is already defined in this scope
    /// </summary>
    public static DiagnosticDescriptor VariableAlreadyDefined => _variableAlreadyDefined ??= DiagnosticDescriptor.Create(
        id: "RAV0167",
        title: "Variable already defined",
        description: "",
        helpLinkUri: "",
        messageFormat: "A variable named '{0}' is already defined in this scope",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0168: Variable '{0}' shadows a variable declared in an outer scope
    /// </summary>
    public static DiagnosticDescriptor VariableShadowsOuterScope => _variableShadowsOuterScope ??= DiagnosticDescriptor.Create(
        id: "RAV0168",
        title: "Variable shadows outer scope variable",
        description: "",
        helpLinkUri: "",
        messageFormat: "Variable '{0}' shadows a variable declared in an outer scope",
        category: "compiler",
        DiagnosticSeverity.Warning,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0191: A readonly field cannot be assigned to (except in a constructor or a variable initializer)
    /// </summary>
    public static DiagnosticDescriptor ReadOnlyFieldCannotBeAssignedTo => _readOnlyFieldCannotBeAssignedTo ??= DiagnosticDescriptor.Create(
        id: "RAV0191",
        title: "A readonly field cannot be assigned to (except in a constructor or a variable initializer)",
        description: "",
        helpLinkUri: "",
        messageFormat: "A readonly field cannot be assigned to (except in a constructor or a variable initializer)",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0200: Property or indexer '{0}' cannot be assigned to -- it is read only
    /// </summary>
    public static DiagnosticDescriptor PropertyOrIndexerCannotBeAssignedIsReadOnly => _propertyOrIndexerCannotBeAssignedIsReadOnly ??= DiagnosticDescriptor.Create(
        id: "RAV0200",
        title: "Property or indexer '{0}' cannot be assigned to -- it is read only",
        description: "",
        helpLinkUri: "",
        messageFormat: "Property or indexer '{0}' cannot be assigned to -- it is read only",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0234: The type or namespace name '{0}' does not exist in the namespace '{1}'
    /// </summary>
    public static DiagnosticDescriptor TypeOrNamespaceNameDoesNotExistInTheNamespace => _typeOrNamespaceNameDoesNotExistInTheNamespace ??= DiagnosticDescriptor.Create(
        id: "RAV0234",
        title: "Type or namespace does not exist in namespace",
        description: "",
        helpLinkUri: "",
        messageFormat: "The type or namespace name '{0}' does not exist in the namespace '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0235: Type is expected without wildcard
    /// </summary>
    public static DiagnosticDescriptor TypeExpectedWithoutWildcard => _typeExpectedWithoutWildcard ??= DiagnosticDescriptor.Create(
        id: "RAV0235",
        title: "Type expected without wildcard",
        description: "",
        helpLinkUri: "",
        messageFormat: "Type is expected without wildcard",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0269: Use of unassigned out parameter '{0}'
    /// </summary>
    public static DiagnosticDescriptor UnassignedOutParameter => _unassignedOutParameter ??= DiagnosticDescriptor.Create(
        id: "RAV0269",
        title: "Unassigned out parameter",
        description: "",
        helpLinkUri: "",
        messageFormat: "Use of unassigned out parameter '{0}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0305: The type '{0}' requires {1} type argument(s)
    /// </summary>
    public static DiagnosticDescriptor TypeRequiresTypeArguments => _typeRequiresTypeArguments ??= DiagnosticDescriptor.Create(
        id: "RAV0305",
        title: "Type requires type arguments",
        description: "",
        helpLinkUri: "",
        messageFormat: "The type '{0}' requires {1} type argument(s)",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0306: Type '{0}' is sealed and cannot be inherited
    /// </summary>
    public static DiagnosticDescriptor CannotInheritFromSealedType => _cannotInheritFromSealedType ??= DiagnosticDescriptor.Create(
        id: "RAV0306",
        title: "Cannot inherit from sealed type",
        description: "",
        helpLinkUri: "",
        messageFormat: "Type '{0}' is sealed and cannot be inherited",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0307: No virtual member named '{0}' was found in the base type to override
    /// </summary>
    public static DiagnosticDescriptor OverrideMemberNotFound => _overrideMemberNotFound ??= DiagnosticDescriptor.Create(
        id: "RAV0307",
        title: "No virtual member to override",
        description: "",
        helpLinkUri: "",
        messageFormat: "No virtual member named '{0}' was found in the base type to override",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0308: Member '{0}' cannot be virtual because the containing type '{1}' is sealed
    /// </summary>
    public static DiagnosticDescriptor VirtualMemberInSealedType => _virtualMemberInSealedType ??= DiagnosticDescriptor.Create(
        id: "RAV0308",
        title: "Virtual member in sealed type",
        description: "",
        helpLinkUri: "",
        messageFormat: "Member '{0}' cannot be virtual because the containing type '{1}' is sealed",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0309: Member '{0}' cannot be marked 'sealed' because it is not an override
    /// </summary>
    public static DiagnosticDescriptor SealedMemberMustOverride => _sealedMemberMustOverride ??= DiagnosticDescriptor.Create(
        id: "RAV0309",
        title: "'sealed' modifier requires override",
        description: "",
        helpLinkUri: "",
        messageFormat: "Member '{0}' cannot be marked 'sealed' because it is not an override",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0310: Member '{0}' cannot override sealed member '{1}'
    /// </summary>
    public static DiagnosticDescriptor CannotOverrideSealedMember => _cannotOverrideSealedMember ??= DiagnosticDescriptor.Create(
        id: "RAV0310",
        title: "Cannot override sealed member",
        description: "",
        helpLinkUri: "",
        messageFormat: "Member '{0}' cannot override sealed member '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0311: Static member '{0}' cannot be marked '{1}'
    /// </summary>
    public static DiagnosticDescriptor StaticMemberCannotBeVirtualOrOverride => _staticMemberCannotBeVirtualOrOverride ??= DiagnosticDescriptor.Create(
        id: "RAV0311",
        title: "Static members cannot be virtual or override",
        description: "",
        helpLinkUri: "",
        messageFormat: "Static member '{0}' cannot be marked '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0312: Static constructors cannot specify a base constructor initializer
    /// </summary>
    public static DiagnosticDescriptor ConstructorInitializerNotAllowedOnStaticConstructor => _constructorInitializerNotAllowedOnStaticConstructor ??= DiagnosticDescriptor.Create(
        id: "RAV0312",
        title: "Static constructors cannot specify a base initializer",
        description: "",
        helpLinkUri: "",
        messageFormat: "Static constructors cannot specify a base constructor initializer",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0313: Explicit interface specifier must name an interface type
    /// </summary>
    public static DiagnosticDescriptor ExplicitInterfaceSpecifierMustBeInterface => _explicitInterfaceSpecifierMustBeInterface ??= DiagnosticDescriptor.Create(
        id: "RAV0313",
        title: "Explicit interface specifier must name an interface",
        description: "",
        helpLinkUri: "",
        messageFormat: "Explicit interface specifier must name an interface type",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0314: Type '{0}' does not implement interface '{1}'
    /// </summary>
    public static DiagnosticDescriptor ContainingTypeDoesNotImplementInterface => _containingTypeDoesNotImplementInterface ??= DiagnosticDescriptor.Create(
        id: "RAV0314",
        title: "Type does not implement interface",
        description: "",
        helpLinkUri: "",
        messageFormat: "Type '{0}' does not implement interface '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0315: Interface '{0}' does not contain a member named '{1}' matching this signature
    /// </summary>
    public static DiagnosticDescriptor ExplicitInterfaceMemberNotFound => _explicitInterfaceMemberNotFound ??= DiagnosticDescriptor.Create(
        id: "RAV0315",
        title: "Explicit interface member not found",
        description: "",
        helpLinkUri: "",
        messageFormat: "Interface '{0}' does not contain a member named '{1}' matching this signature",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0400: Nullable types are not allowed in union types
    /// </summary>
    public static DiagnosticDescriptor NullableTypeInUnion => _nullableTypeInUnion ??= DiagnosticDescriptor.Create(
        id: "RAV0400",
        title: "Nullable type not allowed in union",
        description: "",
        helpLinkUri: "",
        messageFormat: "Nullable types are not allowed in union types",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0426: The type name '{0}' does not exist in the type '{1}'
    /// </summary>
    public static DiagnosticDescriptor TypeNameDoesNotExistInType => _typeNameDoesNotExistInType ??= DiagnosticDescriptor.Create(
        id: "RAV0426",
        title: "Type name does not exist in type",
        description: "",
        helpLinkUri: "",
        messageFormat: "The type name '{0}' does not exist in the type '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0500: The {0} '{1}' is inaccessible due to its protection level
    /// </summary>
    public static DiagnosticDescriptor SymbolIsInaccessible => _symbolIsInaccessible ??= DiagnosticDescriptor.Create(
        id: "RAV0500",
        title: "Symbol is inaccessible",
        description: "",
        helpLinkUri: "",
        messageFormat: "The {0} '{1}' is inaccessible due to its protection level",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV0815: Cannot assign void to an implicitly-typed variable
    /// </summary>
    public static DiagnosticDescriptor CannotAssignVoidToAnImplicitlyTypedVariable => _cannotAssignVoidToAnImplicitlyTypedVariable ??= DiagnosticDescriptor.Create(
        id: "RAV0815",
        title: "Cannot assign void to an implicitly-typed variable",
        description: "",
        helpLinkUri: "",
        messageFormat: "Cannot assign void to an implicitly-typed variable",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1000: Expression expected
    /// </summary>
    public static DiagnosticDescriptor ExpressionExpected => _expressionExpected ??= DiagnosticDescriptor.Create(
        id: "RAV1000",
        title: "Expression expected",
        description: "",
        helpLinkUri: "",
        messageFormat: "Expression expected",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1001: Identifier expected
    /// </summary>
    public static DiagnosticDescriptor IdentifierExpected => _identifierExpected ??= DiagnosticDescriptor.Create(
        id: "RAV1001",
        title: "Identifier expected",
        description: "",
        helpLinkUri: "",
        messageFormat: "Identifier expected",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1002: ';' expected
    /// </summary>
    public static DiagnosticDescriptor SemicolonExpected => _semicolonExpected ??= DiagnosticDescriptor.Create(
        id: "RAV1002",
        title: "Semicolon expected",
        description: "",
        helpLinkUri: "",
        messageFormat: "';' expected",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1003: '{0}' expected
    /// </summary>
    public static DiagnosticDescriptor CharacterExpected => _characterExpected ??= DiagnosticDescriptor.Create(
        id: "RAV1003",
        title: "Character expected",
        description: "",
        helpLinkUri: "",
        messageFormat: "'{0}' expected",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1004: Duplicate '{0}' modifier
    /// </summary>
    public static DiagnosticDescriptor DuplicateModifier => _duplicateModifier ??= DiagnosticDescriptor.Create(
        id: "RAV1004",
        title: "Duplicate modifier",
        description: "",
        helpLinkUri: "",
        messageFormat: "Duplicate '{0}' modifier",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1005: Import directives must appear before alias directives and member declarations
    /// </summary>
    public static DiagnosticDescriptor ImportDirectiveOutOfOrder => _importDirectiveOutOfOrder ??= DiagnosticDescriptor.Create(
        id: "RAV1005",
        title: "Import directive out of order",
        description: "",
        helpLinkUri: "",
        messageFormat: "Import directives must appear before alias directives and member declarations",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1006: Alias directives must appear before member declarations
    /// </summary>
    public static DiagnosticDescriptor AliasDirectiveOutOfOrder => _aliasDirectiveOutOfOrder ??= DiagnosticDescriptor.Create(
        id: "RAV1006",
        title: "Alias directive out of order",
        description: "",
        helpLinkUri: "",
        messageFormat: "Alias directives must appear before member declarations",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1007: Field declarations must start with 'let' or 'var'
    /// </summary>
    public static DiagnosticDescriptor FieldDeclarationRequiresLetOrVar => _fieldDeclarationRequiresLetOrVar ??= DiagnosticDescriptor.Create(
        id: "RAV1007",
        title: "Field declaration requires 'let' or 'var'",
        description: "",
        helpLinkUri: "",
        messageFormat: "Field declarations must start with 'let' or 'var'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1009: Unrecognized escape sequence
    /// </summary>
    public static DiagnosticDescriptor UnrecognizedEscapeSequence => _unrecognizedEscapeSequence ??= DiagnosticDescriptor.Create(
        id: "RAV1009",
        title: "Unrecognized escape sequence",
        description: "",
        helpLinkUri: "",
        messageFormat: "Unrecognized escape sequence",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1010: Newline in constant
    /// </summary>
    public static DiagnosticDescriptor NewlineInConstant => _newlineInConstant ??= DiagnosticDescriptor.Create(
        id: "RAV1010",
        title: "Newline in constant",
        description: "",
        helpLinkUri: "",
        messageFormat: "Newline in constant",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1011: File-scope code must appear before any declarations
    /// </summary>
    public static DiagnosticDescriptor FileScopedCodeOutOfOrder => _fileScopedCodeOutOfOrder ??= DiagnosticDescriptor.Create(
        id: "RAV1011",
        title: "File-scope code out of order",
        description: "",
        helpLinkUri: "",
        messageFormat: "File-scope code must appear before any declarations",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1012: Only console applications may contain file-scope code
    /// </summary>
    public static DiagnosticDescriptor FileScopedCodeRequiresConsole => _fileScopedCodeRequiresConsole ??= DiagnosticDescriptor.Create(
        id: "RAV1012",
        title: "File-scope code requires console application",
        description: "",
        helpLinkUri: "",
        messageFormat: "Only console applications may contain file-scope code",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1013: File-scope code may only appear in one file
    /// </summary>
    public static DiagnosticDescriptor FileScopedCodeMultipleFiles => _fileScopedCodeMultipleFiles ??= DiagnosticDescriptor.Create(
        id: "RAV1013",
        title: "File-scope code may only appear in one file",
        description: "",
        helpLinkUri: "",
        messageFormat: "File-scope code may only appear in one file",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1014: Program.Main entry point not found
    /// </summary>
    public static DiagnosticDescriptor ConsoleApplicationRequiresEntryPoint => _consoleApplicationRequiresEntryPoint ??= DiagnosticDescriptor.Create(
        id: "RAV1014",
        title: "Console application requires entry point",
        description: "",
        helpLinkUri: "",
        messageFormat: "Program.Main entry point not found",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1501: No overload for method '{0}' takes {1} arguments
    /// </summary>
    public static DiagnosticDescriptor NoOverloadForMethod => _noOverloadForMethod ??= DiagnosticDescriptor.Create(
        id: "RAV1501",
        title: "No overload for method taking argument",
        description: "",
        helpLinkUri: "",
        messageFormat: "No overload for method '{0}' takes {1} arguments",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1503: Cannot convert from '{0}' to '{1}'
    /// </summary>
    public static DiagnosticDescriptor CannotConvertFromTypeToType => _cannotConvertFromTypeToType ??= DiagnosticDescriptor.Create(
        id: "RAV1503",
        title: "Cannot convert from type to type",
        description: "",
        helpLinkUri: "",
        messageFormat: "Cannot convert from '{0}' to '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1504: Cannot assign '{0}' to '{1}'
    /// </summary>
    public static DiagnosticDescriptor CannotAssignFromTypeToType => _cannotAssignFromTypeToType ??= DiagnosticDescriptor.Create(
        id: "RAV1504",
        title: "Cannot assign to type",
        description: "",
        helpLinkUri: "",
        messageFormat: "Cannot assign '{0}' to '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1525: Invalid expression term '{0}'
    /// </summary>
    public static DiagnosticDescriptor InvalidExpressionTerm => _invalidExpressionTerm ??= DiagnosticDescriptor.Create(
        id: "RAV1525",
        title: "Invalid expression term",
        description: "",
        helpLinkUri: "",
        messageFormat: "Invalid expression term '{0}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1900: Return statements are not valid in expressions; use an implicit return instead
    /// </summary>
    public static DiagnosticDescriptor ReturnStatementInExpression => _returnStatementInExpression ??= DiagnosticDescriptor.Create(
        id: "RAV1900",
        title: "Return statement not allowed here",
        description: "",
        helpLinkUri: "",
        messageFormat: "Return statements are not valid in expressions; use an implicit return instead",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1901: If expressions used as values must include an else clause
    /// </summary>
    public static DiagnosticDescriptor IfExpressionRequiresElse => _ifExpressionRequiresElse ??= DiagnosticDescriptor.Create(
        id: "RAV1901",
        title: "If expression requires an else clause",
        description: "",
        helpLinkUri: "",
        messageFormat: "If expressions used as values must include an else clause",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV1955: Non-invocable member '{0}' cannot be used like a method
    /// </summary>
    public static DiagnosticDescriptor NonInvocableMember => _nonInvocableMember ??= DiagnosticDescriptor.Create(
        id: "RAV1955",
        title: "Non-invocable member",
        description: "",
        helpLinkUri: "",
        messageFormat: "Non-invocable member '{0}' cannot be used like a method",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2001: The numeric literal is out of range for its target type
    /// </summary>
    public static DiagnosticDescriptor NumericLiteralOutOfRange => _numericLiteralOutOfRange ??= DiagnosticDescriptor.Create(
        id: "RAV2001",
        title: "Numeric literal out of range",
        description: "",
        helpLinkUri: "",
        messageFormat: "The numeric literal is out of range for its target type",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2002: Unterminated character literal
    /// </summary>
    public static DiagnosticDescriptor UnterminatedCharacterLiteral => _unterminatedCharacterLiteral ??= DiagnosticDescriptor.Create(
        id: "RAV2002",
        title: "Unterminated character literal",
        description: "",
        helpLinkUri: "",
        messageFormat: "Unterminated character literal",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2003: Invalid escape sequence in character literal
    /// </summary>
    public static DiagnosticDescriptor InvalidEscapeSequence => _invalidEscapeSequence ??= DiagnosticDescriptor.Create(
        id: "RAV2003",
        title: "Invalid escape sequence",
        description: "",
        helpLinkUri: "",
        messageFormat: "Invalid escape sequence in character literal",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2010: Cannot resolve member '.{0}' without a known target type
    /// </summary>
    public static DiagnosticDescriptor MemberAccessRequiresTargetType => _memberAccessRequiresTargetType ??= DiagnosticDescriptor.Create(
        id: "RAV2010",
        title: "Target-typed member access requires a known type",
        description: "Target-typed member access (like '.Test') requires a type context to resolve the member.",
        helpLinkUri: "",
        messageFormat: "Cannot resolve member '.{0}' without a known target type",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2020: Invalid alias target. Supported targets are types, namespaces, unions, tuples, and predefined types like bool, char, int, long, float, double, string, and unit.
    /// </summary>
    public static DiagnosticDescriptor InvalidAliasType => _invalidAliasType ??= DiagnosticDescriptor.Create(
        id: "RAV2020",
        title: "Invalid alias target",
        description: "",
        helpLinkUri: "",
        messageFormat: "Invalid alias target. Supported targets are types, namespaces, unions, tuples, and predefined types like bool, char, int, long, float, double, string, and unit.",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2021: Invalid import target. Only namespaces and types can be imported
    /// </summary>
    public static DiagnosticDescriptor InvalidImportTarget => _invalidImportTarget ??= DiagnosticDescriptor.Create(
        id: "RAV2021",
        title: "Invalid import target",
        description: "",
        helpLinkUri: "",
        messageFormat: "Invalid import target. Only namespaces and types can be imported",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2022: Cannot spread expression of type '{0}' because it is not enumerable
    /// </summary>
    public static DiagnosticDescriptor SpreadSourceMustBeEnumerable => _spreadSourceMustBeEnumerable ??= DiagnosticDescriptor.Create(
        id: "RAV2022",
        title: "Spread source must be enumerable",
        description: "",
        helpLinkUri: "",
        messageFormat: "Cannot spread expression of type '{0}' because it is not enumerable",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2100: Match expression is not exhaustive; missing case for '{0}'
    /// </summary>
    public static DiagnosticDescriptor MatchExpressionNotExhaustive => _matchExpressionNotExhaustive ??= DiagnosticDescriptor.Create(
        id: "RAV2100",
        title: "Match expression is not exhaustive",
        description: "",
        helpLinkUri: "",
        messageFormat: "Match expression is not exhaustive; missing case for '{0}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2101: Match expression arm is unreachable because a previous arm matches all cases
    /// </summary>
    public static DiagnosticDescriptor MatchExpressionArmUnreachable => _matchExpressionArmUnreachable ??= DiagnosticDescriptor.Create(
        id: "RAV2101",
        title: "Match arm is unreachable",
        description: "",
        helpLinkUri: "",
        messageFormat: "Match expression arm is unreachable because a previous arm matches all cases",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2102: Pattern {0} is not valid for scrutinee of type '{1}'
    /// </summary>
    public static DiagnosticDescriptor MatchExpressionArmPatternInvalid => _matchExpressionArmPatternInvalid ??= DiagnosticDescriptor.Create(
        id: "RAV2102",
        title: "Match arm pattern is not valid",
        description: "",
        helpLinkUri: "",
        messageFormat: "Pattern {0} is not valid for scrutinee of type '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2200: Cannot infer the type of parameter '{0}'. Specify an explicit type or use the lambda in a delegate-typed context
    /// </summary>
    public static DiagnosticDescriptor LambdaParameterTypeCannotBeInferred => _lambdaParameterTypeCannotBeInferred ??= DiagnosticDescriptor.Create(
        id: "RAV2200",
        title: "Lambda parameter type cannot be inferred",
        description: "",
        helpLinkUri: "",
        messageFormat: "Cannot infer the type of parameter '{0}'. Specify an explicit type or use the lambda in a delegate-typed context",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2201: Method group '{0}' cannot be used as a value without a delegate type. Specify a delegate annotation or use the method in a target-typed context
    /// </summary>
    public static DiagnosticDescriptor MethodGroupRequiresDelegateType => _methodGroupRequiresDelegateType ??= DiagnosticDescriptor.Create(
        id: "RAV2201",
        title: "Method group requires delegate type",
        description: "",
        helpLinkUri: "",
        messageFormat: "Method group '{0}' cannot be used as a value without a delegate type. Specify a delegate annotation or use the method in a target-typed context",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2202: Method group '{0}' is ambiguous in this context. Specify a delegate type to disambiguate the target overload
    /// </summary>
    public static DiagnosticDescriptor MethodGroupConversionIsAmbiguous => _methodGroupConversionIsAmbiguous ??= DiagnosticDescriptor.Create(
        id: "RAV2202",
        title: "Method group conversion is ambiguous",
        description: "",
        helpLinkUri: "",
        messageFormat: "Method group '{0}' is ambiguous in this context. Specify a delegate type to disambiguate the target overload",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    /// <summary>
    /// RAV2203: No overload for method '{0}' matches delegate type '{1}'
    /// </summary>
    public static DiagnosticDescriptor NoOverloadMatchesDelegate => _noOverloadMatchesDelegate ??= DiagnosticDescriptor.Create(
        id: "RAV2203",
        title: "No overload matches delegate",
        description: "",
        helpLinkUri: "",
        messageFormat: "No overload for method '{0}' matches delegate type '{1}'",
        category: "compiler",
        DiagnosticSeverity.Error,
        isEnabledByDefault: true);

    public static DiagnosticDescriptor[] AllDescriptors => _allDescriptors ??=
    [
        CannotApplyIndexingWithToAnExpressionOfType,
        OperatorCannotBeAppliedToOperandOfType,
        OperatorCannotBeAppliedToOperandsOfTypes,
        ThisValueIsNotMutable,
        InvalidInvocation,
        TheNameDoesNotExistInTheCurrentContext,
        TypeAlreadyDefinesMember,
        FunctionAlreadyDefined,
        MemberDoesNotContainDefinition,
        VariableUsedLikeAType,
        CallIsAmbiguous,
        LeftOfAssignmentMustBeAVariablePropertyOrIndexer,
        MethodNameExpected,
        UseOfUnassignedVariable,
        LocalVariableMustBeInitialized,
        VariableAlreadyDefined,
        VariableShadowsOuterScope,
        ReadOnlyFieldCannotBeAssignedTo,
        PropertyOrIndexerCannotBeAssignedIsReadOnly,
        TypeOrNamespaceNameDoesNotExistInTheNamespace,
        TypeExpectedWithoutWildcard,
        UnassignedOutParameter,
        TypeRequiresTypeArguments,
        CannotInheritFromSealedType,
        OverrideMemberNotFound,
        VirtualMemberInSealedType,
        SealedMemberMustOverride,
        CannotOverrideSealedMember,
        StaticMemberCannotBeVirtualOrOverride,
        ConstructorInitializerNotAllowedOnStaticConstructor,
        ExplicitInterfaceSpecifierMustBeInterface,
        ContainingTypeDoesNotImplementInterface,
        ExplicitInterfaceMemberNotFound,
        NullableTypeInUnion,
        TypeNameDoesNotExistInType,
        SymbolIsInaccessible,
        CannotAssignVoidToAnImplicitlyTypedVariable,
        ExpressionExpected,
        IdentifierExpected,
        SemicolonExpected,
        CharacterExpected,
        DuplicateModifier,
        ImportDirectiveOutOfOrder,
        AliasDirectiveOutOfOrder,
        FieldDeclarationRequiresLetOrVar,
        UnrecognizedEscapeSequence,
        NewlineInConstant,
        FileScopedCodeOutOfOrder,
        FileScopedCodeRequiresConsole,
        FileScopedCodeMultipleFiles,
        ConsoleApplicationRequiresEntryPoint,
        NoOverloadForMethod,
        CannotConvertFromTypeToType,
        CannotAssignFromTypeToType,
        InvalidExpressionTerm,
        ReturnStatementInExpression,
        IfExpressionRequiresElse,
        NonInvocableMember,
        NumericLiteralOutOfRange,
        UnterminatedCharacterLiteral,
        InvalidEscapeSequence,
        MemberAccessRequiresTargetType,
        InvalidAliasType,
        InvalidImportTarget,
        SpreadSourceMustBeEnumerable,
        MatchExpressionNotExhaustive,
        MatchExpressionArmUnreachable,
        MatchExpressionArmPatternInvalid,
        LambdaParameterTypeCannotBeInferred,
        MethodGroupRequiresDelegateType,
        MethodGroupConversionIsAmbiguous,
        NoOverloadMatchesDelegate,
    ];

    public static DiagnosticDescriptor? GetDescriptor(string diagnosticId) => diagnosticId switch
    {
        "RAV0021" => CannotApplyIndexingWithToAnExpressionOfType,
        "RAV0023" => OperatorCannotBeAppliedToOperandOfType,
        "RAV0024" => OperatorCannotBeAppliedToOperandsOfTypes,
        "RAV0027" => ThisValueIsNotMutable,
        "RAV0030" => InvalidInvocation,
        "RAV0103" => TheNameDoesNotExistInTheCurrentContext,
        "RAV0111" => TypeAlreadyDefinesMember,
        "RAV0112" => FunctionAlreadyDefined,
        "RAV0117" => MemberDoesNotContainDefinition,
        "RAV0118" => VariableUsedLikeAType,
        "RAV0121" => CallIsAmbiguous,
        "RAV0131" => LeftOfAssignmentMustBeAVariablePropertyOrIndexer,
        "RAV0149" => MethodNameExpected,
        "RAV0165" => UseOfUnassignedVariable,
        "RAV0166" => LocalVariableMustBeInitialized,
        "RAV0167" => VariableAlreadyDefined,
        "RAV0168" => VariableShadowsOuterScope,
        "RAV0191" => ReadOnlyFieldCannotBeAssignedTo,
        "RAV0200" => PropertyOrIndexerCannotBeAssignedIsReadOnly,
        "RAV0234" => TypeOrNamespaceNameDoesNotExistInTheNamespace,
        "RAV0235" => TypeExpectedWithoutWildcard,
        "RAV0269" => UnassignedOutParameter,
        "RAV0305" => TypeRequiresTypeArguments,
        "RAV0306" => CannotInheritFromSealedType,
        "RAV0307" => OverrideMemberNotFound,
        "RAV0308" => VirtualMemberInSealedType,
        "RAV0309" => SealedMemberMustOverride,
        "RAV0310" => CannotOverrideSealedMember,
        "RAV0311" => StaticMemberCannotBeVirtualOrOverride,
        "RAV0312" => ConstructorInitializerNotAllowedOnStaticConstructor,
        "RAV0313" => ExplicitInterfaceSpecifierMustBeInterface,
        "RAV0314" => ContainingTypeDoesNotImplementInterface,
        "RAV0315" => ExplicitInterfaceMemberNotFound,
        "RAV0400" => NullableTypeInUnion,
        "RAV0426" => TypeNameDoesNotExistInType,
        "RAV0500" => SymbolIsInaccessible,
        "RAV0815" => CannotAssignVoidToAnImplicitlyTypedVariable,
        "RAV1000" => ExpressionExpected,
        "RAV1001" => IdentifierExpected,
        "RAV1002" => SemicolonExpected,
        "RAV1003" => CharacterExpected,
        "RAV1004" => DuplicateModifier,
        "RAV1005" => ImportDirectiveOutOfOrder,
        "RAV1006" => AliasDirectiveOutOfOrder,
        "RAV1007" => FieldDeclarationRequiresLetOrVar,
        "RAV1009" => UnrecognizedEscapeSequence,
        "RAV1010" => NewlineInConstant,
        "RAV1011" => FileScopedCodeOutOfOrder,
        "RAV1012" => FileScopedCodeRequiresConsole,
        "RAV1013" => FileScopedCodeMultipleFiles,
        "RAV1014" => ConsoleApplicationRequiresEntryPoint,
        "RAV1501" => NoOverloadForMethod,
        "RAV1503" => CannotConvertFromTypeToType,
        "RAV1504" => CannotAssignFromTypeToType,
        "RAV1525" => InvalidExpressionTerm,
        "RAV1900" => ReturnStatementInExpression,
        "RAV1901" => IfExpressionRequiresElse,
        "RAV1955" => NonInvocableMember,
        "RAV2001" => NumericLiteralOutOfRange,
        "RAV2002" => UnterminatedCharacterLiteral,
        "RAV2003" => InvalidEscapeSequence,
        "RAV2010" => MemberAccessRequiresTargetType,
        "RAV2020" => InvalidAliasType,
        "RAV2021" => InvalidImportTarget,
        "RAV2022" => SpreadSourceMustBeEnumerable,
        "RAV2100" => MatchExpressionNotExhaustive,
        "RAV2101" => MatchExpressionArmUnreachable,
        "RAV2102" => MatchExpressionArmPatternInvalid,
        "RAV2200" => LambdaParameterTypeCannotBeInferred,
        "RAV2201" => MethodGroupRequiresDelegateType,
        "RAV2202" => MethodGroupConversionIsAmbiguous,
        "RAV2203" => NoOverloadMatchesDelegate,
        _ => null
    };
}
