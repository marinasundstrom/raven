using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BoundNodeGenerator;

static class SymbolVisitorGenerator
{
    public static string GenerateVisitor(IEnumerable<SymbolInterfaceModel> interfaces)
    {
        var ordered = interfaces
            .OrderBy(i => i.Name, StringComparer.Ordinal)
            .ToList();

        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");
        builder.AppendLine();
        builder.AppendLine("namespace Raven.CodeAnalysis;");
        builder.AppendLine();
        builder.AppendLine("public abstract partial class SymbolVisitor");
        builder.AppendLine("{");

        foreach (var symbolInterface in ordered)
        {
            var visitName = GetVisitName(symbolInterface.Name);
            builder.AppendLine($"    public virtual void Visit{visitName}({symbolInterface.Name} symbol)");
            builder.AppendLine("    {");
            builder.AppendLine("        DefaultVisit(symbol);");
            builder.AppendLine("    }");
            builder.AppendLine();
        }

        if (ordered.Count > 0)
            builder.Length -= Environment.NewLine.Length * 2;

        builder.AppendLine("}");
        return builder.ToString();
    }

    public static string GenerateGenericVisitor(IEnumerable<SymbolInterfaceModel> interfaces)
    {
        var ordered = interfaces
            .OrderBy(i => i.Name, StringComparer.Ordinal)
            .ToList();

        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");
        builder.AppendLine();
        builder.AppendLine("namespace Raven.CodeAnalysis;");
        builder.AppendLine();
        builder.AppendLine("public abstract partial class SymbolVisitor<TResult>");
        builder.AppendLine("{");

        foreach (var symbolInterface in ordered)
        {
            var visitName = GetVisitName(symbolInterface.Name);
            builder.AppendLine($"    public virtual TResult Visit{visitName}({symbolInterface.Name} symbol)");
            builder.AppendLine("    {");
            builder.AppendLine("        return DefaultVisit(symbol);");
            builder.AppendLine("    }");
            builder.AppendLine();
        }

        if (ordered.Count > 0)
            builder.Length -= Environment.NewLine.Length * 2;

        builder.AppendLine("}");
        return builder.ToString();
    }

    private static string GetVisitName(string interfaceName)
    {
        var name = interfaceName;
        if (name.StartsWith("I", StringComparison.Ordinal))
            name = name[1..];

        if (name.EndsWith("Symbol", StringComparison.Ordinal))
            name = name[..^"Symbol".Length];

        if (name.Length == 0)
            return interfaceName.TrimStart('I');

        return name;
    }
}
