using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BoundNodeGenerator;

static class BoundTreeVisitorGenerator
{
    public static string GenerateVisitor(IEnumerable<BoundNodeModel> nodes)
    {
        var concreteNodes = nodes.Where(static n => !n.IsAbstract)
            .OrderBy(n => n.Name, StringComparer.Ordinal)
            .ToList();

        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");
        builder.AppendLine();
        builder.AppendLine("namespace Raven.CodeAnalysis;");
        builder.AppendLine();
        builder.AppendLine("partial class BoundTreeVisitor");
        builder.AppendLine("{");

        foreach (var node in concreteNodes)
        {
            builder.AppendLine($"    public virtual void Visit{node.VisitorMethodName}({node.Name} node)");
            builder.AppendLine("    {");
            builder.AppendLine("        DefaultVisit(node);");
            builder.AppendLine("    }");
            builder.AppendLine();
        }

        if (concreteNodes.Count > 0)
            builder.Length -= Environment.NewLine.Length * 2; // remove trailing blank line

        builder.AppendLine("}");
        return builder.ToString();
    }

    public static string GenerateGenericVisitor(IEnumerable<BoundNodeModel> nodes)
    {
        var concreteNodes = nodes.Where(static n => !n.IsAbstract)
            .OrderBy(n => n.Name, StringComparer.Ordinal)
            .ToList();

        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");
        builder.AppendLine();
        builder.AppendLine("namespace Raven.CodeAnalysis;");
        builder.AppendLine();
        builder.AppendLine("partial class BoundTreeVisitor<TResult>");
        builder.AppendLine("{");

        foreach (var node in concreteNodes)
        {
            builder.AppendLine($"    public virtual TResult Visit{node.VisitorMethodName}({node.Name} node)");
            builder.AppendLine("    {");
            builder.AppendLine("        return DefaultVisit(node);");
            builder.AppendLine("    }");
            builder.AppendLine();
        }

        if (concreteNodes.Count > 0)
            builder.Length -= Environment.NewLine.Length * 2;

        builder.AppendLine("}");
        return builder.ToString();
    }
}
