using System.Linq;
using System.Text;

namespace BoundNodeGenerator;

static class BoundNodePartialGenerator
{
    public static string Generate(BoundNodeModel model)
    {
        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");

        if (model.Parameters.Any(static p => p.TypeName.Contains("ImmutableArray<", StringComparison.Ordinal)))
        {
            builder.AppendLine();
            builder.AppendLine("using System.Collections.Immutable;");
        }

        builder.AppendLine();
        builder.AppendLine($"namespace {model.Namespace};");
        builder.AppendLine();
        builder.AppendLine($"{model.Accessibility} partial class {model.Name}");
        builder.AppendLine("{");

        var visitName = model.VisitorMethodName;

        builder.AppendLine($"    public override void Accept(BoundTreeVisitor visitor)");
        builder.AppendLine("    {");
        builder.AppendLine($"        visitor.Visit{visitName}(this);");
        builder.AppendLine("    }");
        builder.AppendLine();

        builder.AppendLine($"    public override TResult Accept<TResult>(BoundTreeVisitor<TResult> visitor)");
        builder.AppendLine("    {");
        builder.AppendLine($"        return visitor.Visit{visitName}(this);");
        builder.AppendLine("    }");

        if (model.HasUpdate)
        {
            builder.AppendLine();
            builder.AppendLine($"    {model.Accessibility} {model.Name} Update({string.Join(", ", model.Parameters.Select(p => $"{p.TypeName} {p.ParameterName}"))})");
            builder.AppendLine("    {");

            var conditions = string.Join(" || ", model.Parameters.Select(p => $"{p.PropertyName} != {p.ParameterName}"));

            builder.AppendLine($"        if ({conditions})");
            builder.AppendLine("        {");
            builder.AppendLine($"            return new {model.Name}({string.Join(", ", model.Parameters.Select(p => p.ParameterName))});");
            builder.AppendLine("        }");
            builder.AppendLine();
            builder.AppendLine("        return this;");
            builder.AppendLine("    }");
        }

        builder.AppendLine("}");

        return builder.ToString();
    }
}
