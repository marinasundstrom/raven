using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BoundNodeGenerator;

static class BoundNodeFactoryGenerator
{
    public static string Generate(IReadOnlyList<BoundNodeModel> models)
    {
        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");
        builder.AppendLine("using System;");

        if (models.Any(static m => m.Parameters.Any(static p => p.TypeName.Contains("ImmutableArray<", StringComparison.Ordinal))))
        {
            builder.AppendLine("using System.Collections.Immutable;");
        }

        builder.AppendLine();
        builder.AppendLine("namespace Raven.CodeAnalysis;");
        builder.AppendLine();
        builder.AppendLine("internal sealed partial class BoundNodeFactory");
        builder.AppendLine("{");
        builder.AppendLine("    public BoundNodeFactory(Compilation compilation)");
        builder.AppendLine("    {");
        builder.AppendLine("        Compilation = compilation ?? throw new ArgumentNullException(nameof(compilation));");
        builder.AppendLine("    }");
        builder.AppendLine();
        builder.AppendLine("    public Compilation Compilation { get; }");
        builder.AppendLine();

        foreach (var model in models.Where(static m => !m.IsAbstract))
        {
            var parameters = string.Join(", ", model.Parameters.Where(static p => !IsInjected(p)).Select(FormatParameter));
            builder.AppendLine($"    public {model.Name} {model.FactoryMethodName}({parameters})");
            builder.AppendLine("    {");
            var arguments = string.Join(", ", model.Parameters.Select(GetArgument));
            builder.AppendLine($"        return new {model.Name}({arguments});");
            builder.AppendLine("    }");
            builder.AppendLine();
        }

        builder.AppendLine("}");
        return builder.ToString();
    }

    private static string FormatParameter(ParameterModel parameter)
    {
        var defaultValue = parameter.DefaultValue is null ? string.Empty : $" = {parameter.DefaultValue}";
        return $"{parameter.TypeName} {parameter.ParameterName}{defaultValue}";
    }

    private static bool IsInjected(ParameterModel parameter)
        => parameter.ParameterName.Equals("unitType", StringComparison.Ordinal);

    private static string GetArgument(ParameterModel parameter)
    {
        if (IsInjected(parameter))
            return "Compilation.UnitTypeSymbol";

        return parameter.ParameterName;
    }
}
