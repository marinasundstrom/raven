using System.Collections.Generic;
using System.Linq;
using System.Text;

namespace BoundNodeGenerator;

static class BoundTreeRewriterGenerator
{
    private static readonly HashSet<string> SkipRewriterMethods = new(StringComparer.Ordinal)
    {
        "AssignmentExpression",
        "BreakStatement",
        "ContinueStatement",
    };

    public static string Generate(IEnumerable<BoundNodeModel> nodes)
    {
        var concreteNodes = nodes.Where(static n => !n.IsAbstract)
            .OrderBy(n => n.Name, StringComparer.Ordinal)
            .ToList();

        var builder = new StringBuilder();
        builder.AppendLine("// <auto-generated />");
        builder.AppendLine("#nullable enable");
        builder.AppendLine();

        var requiresImmutableArray = concreteNodes.Any(RequiresImmutableArrayHelper);

        if (requiresImmutableArray)
        {
            builder.AppendLine("using System.Collections.Immutable;");
            builder.AppendLine();
        }

        builder.AppendLine("namespace Raven.CodeAnalysis;");
        builder.AppendLine();
        builder.AppendLine("partial class BoundTreeRewriter");
        builder.AppendLine("{");

        foreach (var node in concreteNodes)
        {
            if (!node.HasUpdate)
                continue;

            if (SkipRewriterMethods.Contains(node.VisitorMethodName))
                continue;

            builder.AppendLine($"    public override BoundNode? Visit{node.VisitorMethodName}({node.Name} node)");
            builder.AppendLine("    {");

            var statements = new List<string>();
            var arguments = new List<string>();

            foreach (var parameter in node.Parameters)
            {
                var propertyAccess = $"node.{parameter.PropertyName}";

                switch (parameter.Kind)
                {
                    case ParameterKind.BoundNode:
                    {
                        var visitCall = $"Visit({propertyAccess})" + (parameter.IsNullable ? string.Empty : "!");
                        var assignment = $"({parameter.TypeName}){visitCall}";
                        statements.Add($"        var {parameter.ParameterName} = {assignment};");
                        arguments.Add(parameter.ParameterName);
                        break;
                    }

                    case ParameterKind.BoundNodeList:
                    {
                        var visitListCall = $"VisitList({propertyAccess})";
                        if (parameter.TypeName.StartsWith("ImmutableArray<", StringComparison.Ordinal))
                        {
                            visitListCall += ".ToImmutableArray()";
                        }

                        statements.Add($"        var {parameter.ParameterName} = {visitListCall};");
                        arguments.Add(parameter.ParameterName);
                        break;
                    }

                    case ParameterKind.Symbol:
                    {
                        var visitCall = $"VisitSymbol({propertyAccess})" + (parameter.IsNullable ? string.Empty : "!");
                        var assignment = $"({parameter.TypeName}){visitCall}";
                        statements.Add($"        var {parameter.ParameterName} = {assignment};");
                        arguments.Add(parameter.ParameterName);
                        break;
                    }

                    case ParameterKind.SymbolList:
                    {
                        var typeArgument = parameter.ElementTypeName ?? "ISymbol";
                        var visitCall = $"VisitSymbolList<{typeArgument}>({propertyAccess})";
                        statements.Add($"        var {parameter.ParameterName} = {visitCall};");
                        arguments.Add(parameter.ParameterName);
                        break;
                    }

                    default:
                        arguments.Add(propertyAccess);
                        break;
                }
            }

            foreach (var statement in statements)
                builder.AppendLine(statement);

            if (statements.Count > 0)
                builder.AppendLine();

            builder.AppendLine($"        return node.Update({string.Join(", ", arguments)});");
            builder.AppendLine("    }");
            builder.AppendLine();
        }

        builder.AppendLine("}");
        return builder.ToString();
    }

    private static bool RequiresImmutableArrayHelper(BoundNodeModel model)
    {
        if (!model.HasUpdate)
            return false;

        if (SkipRewriterMethods.Contains(model.VisitorMethodName))
            return false;

        return model.Parameters.Any(static p =>
            p.Kind == ParameterKind.BoundNodeList && p.TypeName.StartsWith("ImmutableArray<", StringComparison.Ordinal));
    }
}
